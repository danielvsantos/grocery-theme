export declare type TachyonsScaleInput = string | number | undefined;
declare type Group<T, U> = {
    [key in keyof T]: U;
};
interface ResponsiveInput<T> {
    mobile: T;
    desktop: T;
}
/** Takes a parser of units, and returns a parser that accepts either a
 * value or a responsive input of that same type of value
 * (i.e. {mobile: ..., desktop: ...}), and returns an object of the same
 * format of the input.
 */
export declare const parseResponsive: <T, U>(parse: (value: T) => U) => (value: T | ResponsiveInput<T>) => U | {
    mobile: U;
    desktop: U;
} | null;
export declare const parseTachyonsGroup: <T>(group: Group<T, TachyonsScaleInput>) => Group<T, number>;
export declare const parseWidth: (value: string | ResponsiveInput<string>) => string | number | {
    mobile: string | number | null;
    desktop: string | number | null;
} | null;
/** TODO: allow responsive values on height
 * (and verify height usage overall)
 **/
export declare const parseHeight: (input: string) => string | number | null;
export declare const parsePaddings: (props: {
    paddingTop?: TachyonsScaleInput;
    paddingBottom?: TachyonsScaleInput;
    paddingLeft?: TachyonsScaleInput;
    paddingRight?: TachyonsScaleInput;
}) => string;
export declare const parseMargins: (props: {
    marginTop?: TachyonsScaleInput;
    marginBottom?: TachyonsScaleInput;
    marginLeft?: TachyonsScaleInput;
    marginRight?: TachyonsScaleInput;
}) => string;
export declare const parseBorders: ({ border, borderWidth, borderColor }: Border) => string;
export {};
