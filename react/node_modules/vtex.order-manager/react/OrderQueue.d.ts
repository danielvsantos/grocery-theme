import React, { FC, ReactNode } from 'react';
import { QueueStatus } from './constants';
import { CancellablePromiseLike } from './modules/SequentialTaskQueue';
declare type ListenFunction = (event: QueueStatus, callback: () => any) => () => void;
interface Context {
    enqueue: <T extends any>(task: () => Promise<T>, id?: string) => CancellablePromiseLike<T>;
    listen: ListenFunction;
    isWaiting: (id: string) => boolean;
}
interface OrderQueueProviderProps {
    children: ReactNode;
}
export declare const useQueueStatus: (listen: ListenFunction) => React.MutableRefObject<QueueStatus>;
export declare const OrderQueueProvider: FC<OrderQueueProviderProps>;
export declare const useOrderQueue: () => Context;
declare const _default: {
    OrderQueueProvider: React.FC<OrderQueueProviderProps>;
    QueueStatus: typeof QueueStatus;
    useOrderQueue: () => Context;
    useQueueStatus: (listen: ListenFunction) => React.MutableRefObject<QueueStatus>;
};
export default _default;
